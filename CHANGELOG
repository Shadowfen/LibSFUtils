[COLOR="DeepSkyBlue"]15[/COLOR]
[LIST]
[*] Added new Localization function LoadLanguage().

function sfutil.LoadLanguage(localization_strings, defaultLang)
    Add strings to the string table for the client language (or
    the default language if the client language did not have strings
    defined for it). The localization_strings parameter is a table of tables
    of localization strings, and defaultLang defaults to "en" if not
    provided.
    
    An example of a localization_strings table might be:
    
    MyAddon.localization_strings = {
    ["en"] = {
            MYADDON_RANDOM_TEXT = "This is a test",
        },
    ["de"] = {
            MYADDON_RANDOM_TEXT = "Dies ist ein Test",
        },
    ["fr"] = {
            MYADDON_RANDOM_TEXT = "C'est un test",
        },
    }
    
    Then the sfutil.LoadLanguage(MyAddon.localization_strings, "en") would load
    the appropriate strings table for the client language, or the "en" strings
    if there isn't a table for the language (say it was "jp").
[*] Added a deep copy function for a table - deepCopy(orig) returns new table.
[/LIST]

[COLOR="DeepSkyBlue"]14[/COLOR]
[LIST]
[*] API Bump
[/LIST]

[COLOR="DeepSkyBlue"]13[/COLOR]
[LIST]
[*] Hybridize library to provide both LibStub access for addons still using it while providing direct access for addons that have transitioned away from using LibStub. The LibSFUtils library will still depend on LibStub to provide backwards compatibility until LibStub support/access is discontinued (basically when I've converted all of my addons to the new paradigm).
    While LibStub access is still supported, users of it typically have something like
    [CODE]local SF = LibStub("LibSFUtils")[/CODE]
    New users of the library should not do this however. Instead, you should use the direct access method such as 
    [CODE]local SF = LibSFUtils[/CODE]
    Current addons using this library should convert their LibStub("LibSFUtils") to the second version of this line (to minimize the amount of changes required to their own code).
[/LIST]

[COLOR="DeepSkyBlue"]12[/COLOR]
[LIST]
[*] First release as a standalone library.
[*] Added the slashHelp() function to addonChatter. This will allow you to pass in a table of slash commands and descriptions and have them printed to chat with colorization and the [...] addon prefix.
    For example, chatter:slashHelp("my title", { { "/xx.init", "Reinitialize"}, {"/xx cute", "Display cute remark"} } )
    Will display
        [myaddon] my title
        [myaddon] /xx.init   = Reinitialize
        [myaddon] /xx cute   = Display cute remark
    in the chat window.
[*] [COLOR="Red"]Breaking change[/COLOR] Removed sfutil.copy() - deep table copy as ZO_DeepTableCopy(source, dest) can be used instead.
[*] Wrote documentation.
[/LIST]

[COLOR="DeepSkyBlue"]11[/COLOR]
[LIST]
[*] Beta as an standalone library.
[/LIST]

